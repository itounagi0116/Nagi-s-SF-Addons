# VRChat用VOR/ILSシステム モジュール式実装ガイド

## 概要

このシステムは、航空ナビゲーションシステムの2つの主要コンポーネント（VORとILS）を共通の基本機能とそれぞれ専用の機能に分離したモジュール式アーキテクチャで実装しています。

## クラス構成

1. **NavigationSystemBase**: 共通基本クラス
2. **VORSystem**: VOR固有の機能実装
3. **ILSSystem**: ILS固有の機能実装
4. **NavigationManager**: 複数のナビゲーションシステムを管理するマネージャークラス

## セットアップ手順

### 1. プロジェクト準備

```
1. Unity 2019.4.31f1（VRChat推奨バージョン）をインストール
2. VRChat SDK3をインポート
3. UdonSharpをインポート
4. 新しいシーンを作成
```

### 2. スクリプトのインポート

作成した4つのスクリプトファイルをプロジェクトにインポート:
- NavigationSystemBase.cs
- VORSystem.cs
- ILSSystem.cs
- NavigationManager.cs

### 3. VORステーションの作成

```
1. 空のGameObjectを作成し、「VOR_Station」と名付ける
2. VORSystemコンポーネントをアタッチ
3. 必要なパラメータを設定:
   - navIdentifier: VORの識別子（例: "KYO"）
   - frequency: VOR周波数（例: 113.5）
   - magneticVariation: 磁気偏差（例: 7.0）
   - systemTransform: このオブジェクトのTransform
4. VOR用のUI表示コンテナを作成して参照設定
```

### 4. ILSシステムの作成

```
1. 空のGameObjectを作成し、「ILS_System」と名付ける
2. ILSSystemコンポーネントをアタッチ
3. 必要なパラメータを設定:
   - navIdentifier: ILSの識別子（例: "IRWY27"）
   - frequency: ローカライザー周波数（例: 110.3）
   - runwayHeading: 滑走路真方位（例: 270.0）
   - glideslopeAngle: グライドスロープ角度（例: 3.0）
   - systemTransform: このオブジェクトのTransform
4. ILS用のUI表示コンテナを作成して参照設定
```

### 5. ナビゲーションマネージャーの設定

```
1. 空のGameObjectを作成し、「NavigationManager」と名付ける
2. NavigationManagerコンポーネントをアタッチ
3. 作成したVORSystemsとILSSystemsを配列に追加
4. UI表示用のテキスト要素を参照設定
```

### 6. UI要素の作成

#### 共通UI要素
```
1. Canvas > Nav_Common_UI を作成
2. 周波数表示、識別子表示、距離表示のTextを追加
3. 周波数調整ボタン（+/-）を追加
4. ナビゲーションタイプ切替ボタンを追加
```

#### VOR固有のUI
```
1. Canvas > VOR_Display を作成
2. OBS（方位選択ダイアル）の視覚的表現を追加
3. CDI（コース偏差インジケーター）の針を追加
4. TO/FROM表示を追加
5. OBS調整ボタン（+/-）を追加
```

#### ILS固有のUI
```
1. Canvas > ILS_Display を作成
2. ローカライザー針を追加
3. グライドスロープ針を追加
4. 滑走路表示を追加
```

### 7. インタラクションの設定

```
1. 周波数調整ボタンにUdonBehaviourを追加し、NavigationManagerの
   AdjustFrequency(±0.05)を呼び出すよう設定
2. ナビゲーションタイプ切替ボタンにUdonBehaviourを追加し、
   ToggleNavigationTypeを呼び出すよう設定
3. ナビゲーションシステム切替ボタンにUdonBehaviourを追加し、
   NextNavigationSystemを呼び出すよう設定
4. OBS調整ボタンにUdonBehaviourを追加し、AdjustOBS(±1.0)を
   呼び出すよう設定
```

## デバッグとテスト

```
1. Gizmo表示をオンにして、VORのラジアルとILSの範囲が正しく表示されるか確認
2. プレイモードでナビゲーション計算が正しく動作するか確認
3. VRChatのビルド&テストでネットワーク同期が正しく動作するか確認
```

## 拡張機能のヒント

1. **DME（距離測定装置）の追加**:
   - NavigationSystemBaseに距離計算は既に含まれているため、単純にUIを拡張

2. **モールス信号の実装**:
   - 各ナビゲーションシステムに音声出力機能を追加
   - 識別子からモールス信号パターンを生成

3. **複数のVOR交差を使用した位置特定**:
   - 複数のVORSystemからのRadialを組み合わせて、三角測量機能を実装

4. **自動操縦との連携**:
   - VOR追従やILS自動着陸のロジックを実装する別のコンポーネントを作成
   - NavigationSystemBaseからの出力データを利用

5. **気象条件の影響**:
   - ナビゲーション精度に影響する気象条件シミュレーションを追加

## サンプルシナリオ: 仮想空港ワールドでの実装

```
1. 仮想空港に3つのVORステーションを配置:
   - 空港VOR (識別子: "APTVR", 周波数: 112.6 MHz)
   - 北部VOR (識別子: "NTVR", 周波数: 114.8 MHz)
   - 西部VOR (識別子: "WTVR", 周波数: 116.2 MHz)

2. 2つの滑走路にILSを設定:
   - 滑走路27 (識別子: "I27L", 周波数: 109.5 MHz, 真方位: 270度)
   - 滑走路09 (識別子: "I09R", 周波数: 110.7 MHz, 真方位: 90度)

3. コックピットUI内に航法レーダー表示を配置:
   - 各VORステーションからのラジアルを視覚化
   - 現在位置とILSコースラインを表示
```

## トラブルシューティング

### 一般的な問題と解決策

1. **表示が更新されない**:
   - Updateメソッド内での計算が正しいか確認
   - UI参照が正しく設定されているか確認

2. **針の動きが不自然**:
   - スケーリング係数を調整
   - DebugLogでデバッグ値を確認

3. **ネットワーク同期の問題**:
   - RequestSerializationが呼び出されているか確認
   - UdonSyncedプロパティが正しく定義されているか確認

4. **パフォーマンスの問題**:
   - Update内の計算を最適化
   - 遠距離にあるシステムの計算を省略

## 将来の拡張性

このモジュール式設計により、以下のような拡張が容易に実装可能です:

1. 新しいナビゲーションシステム（例: GPS、TACAN）を追加する場合、NavigationSystemBaseを継承した新しいクラスを作成するだけで済みます

2. 複数のナビゲーションシステムを組み合わせた高度な機能（例: フライトプランナー）も、既存のコンポーネントを再利用して構築できます

3. ビジュアル要素はUI設計から完全に分離されているため、異なるコックピットデザインにも柔軟に対応できます